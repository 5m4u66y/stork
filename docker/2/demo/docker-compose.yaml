version: '2.1'

services:
  server:
    restart: always
    build:
      context: .
      dockerfile: docker/2/images/stork.Dockerfile
      target: server
    # Explicitly add entries to /etc/hosts for the hosts which are connected
    # to more than two networks. These explicit entries should be added at the
    # beginning of the /etc/hosts file enforcing that the connections by hostname
    # are established with the IP addresses belonging to the storknet network.
    # Before this change, agents sometimes listened on IP addresses dedicated for
    # DHCP communication instead.
    extra_hosts:
      - "agent-kea:172.20.0.100"
      - "agent-kea6:172.20.0.106"
    image: "${REGISTRY-registry.gitlab.isc.org/isc-projects/stork}/server:latest"
    networks:
      - storknet
    expose:
      - "8080"
    ports:
      - "8088:8080"
    environment:
      STORK_DATABASE_HOST: postgres
      STORK_DATABASE_PORT: 5432
      STORK_DATABASE_USER_NAME: stork
      STORK_DATABASE_PASSWORD: stork
      STORK_DATABASE_NAME: stork
      STORK_SERVER_ENABLE_METRICS: 1
    depends_on:
      - postgres

  webui:
    build:
      context: .
      dockerfile: docker/2/images/stork.Dockerfile
      target: webui
    image: "${REGISTRY-registry.gitlab.isc.org/isc-projects/stork}/webui:latest"
    networks:
      - storknet
    ports:
      - "8080:80"
    environment:
      API_HOST: server
      API_PORT: 8080
    depends_on:
      - server

  agent-kea:
    restart: always
    build:
      context: .
      dockerfile: docker/2/images/stork.Dockerfile
      target: kea
    # Explicitly add entries to /etc/hosts for the hosts which are connected
    # to more than two networks. These explicit entries should be added at the
    # beginning of the /etc/hosts file enforcing that the connections by hostname
    # are established with the IP addresses belonging to the storknet network.
    # Before this change, agents sometimes listened on IP addresses dedicated for
    # DHCP communication instead.
    extra_hosts:
      - "agent-kea:172.20.0.100"
    image: "${REGISTRY-registry.gitlab.isc.org/isc-projects/stork}/agent-kea:latest"
    hostname: agent-kea
    networks:
      storknet:
        ipv4_address: 172.20.0.100
      subnet-00:
        ipv4_address: 172.100.0.100
      subnet-01:
        ipv4_address: 172.101.0.100
      subnet-02:
        ipv4_address: 172.102.0.100
    expose:
      - "8080"  # stork server to agent
      - "9100"  # node_exporter for prometheus
      - "9547"  # kea_exporter for prometheus
    ports:
      # publish ports for development purposes
      - "8888:8080"  # port to agent
      - "9001:9001"  # port to supervisor xml-rpc
    environment:
      DB_TYPE: mysql
      DB_HOST: mariadb
      DB_USER: agent_kea
      DB_PASSWORD: agent_kea
      DB_ROOT_USER: root
      DB_ROOT_PASSWORD: root
      DB_NAME: agent_kea
      STORK_AGENT_SERVER_URL: ${STORK_SERVER_URL-http://server:8080}
      STORK_AGENT_HOST: agent-kea
    volumes:
      - ${PWD}/docker/2/demo/config/agent-kea/kea-ctrl-agent.conf:/etc/kea/kea-ctrl-agent.conf
      - ${PWD}/docker/2/demo/config/agent-kea/kea-dhcp4.conf:/etc/kea/kea-dhcp4.conf
      - ${PWD}/docker/2/demo/config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-agent.conf:/etc/supervisor/conf.d/kea-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-dhcp4.conf:/etc/supervisor/conf.d/kea-dhcp4.conf
      - ${PWD}/docker/2/demo/config/supervisor/stork-agent.conf:/etc/supervisor/conf.d/stork-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/prometheus.conf:/etc/supervisor/conf.d/prometheus.conf
    depends_on:
      - mariadb

  agent-kea6:
    restart: always
    build:
      context: .
      dockerfile: docker/2/images/stork.Dockerfile
      target: kea
    # Explicitly add entries to /etc/hosts for the hosts which are connected
    # to more than two networks. These explicit entries should be added at the
    # beginning of the /etc/hosts file enforcing that the connections by hostname
    # are established with the IP addresses belonging to the storknet network.
    # Before this change, agents sometimes listened on IP addresses dedicated for
    # DHCP communication instead.
    extra_hosts:
      - "agent-kea6:172.20.0.106"
    image: "${REGISTRY-registry.gitlab.isc.org/isc-projects/stork}/agent-kea6:latest"
    hostname: agent-kea6
    networks:
      storknet:
        ipv4_address: 172.20.0.106
      subnet6-00:
        ipv6_address: 3000:db8:1::100
      subnet6-01:
        ipv6_address: 3001:db8:1::100
    expose:
      - "8080"  # stork server to agent
      - "9547"  # kea_exporter for prometheus
    ports:
      # publish ports for development purposes
      - "8886:8080"  # port to agent
    environment:
      DB_TYPE: pgsql
      DB_NAME: agent_kea6
      DB_USER: agent_kea6
      DB_PASSWORD: agent_kea6
      DB_HOST: postgres
      DB_ROOT_USER: stork
      DB_ROOT_PASSWORD: stork
      STORK_AGENT_SERVER_URL: ${STORK_SERVER_URL-http://server:8080}
      STORK_AGENT_HOST: agent-kea6
    volumes:
      - ${PWD}/docker/2/demo/config/agent-kea6/kea-ctrl-agent.conf:/etc/kea/kea-ctrl-agent.conf
      - ${PWD}/docker/2/demo/config/agent-kea6/kea-dhcp6.conf:/etc/kea/kea-dhcp6.conf
      - ${PWD}/docker/2/demo/config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-agent.conf:/etc/supervisor/conf.d/kea-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-dhcp6.conf:/etc/supervisor/conf.d/kea-dhcp6.conf
      - ${PWD}/docker/2/demo/config/supervisor/stork-agent.conf:/etc/supervisor/conf.d/stork-agent.conf
    depends_on:
      - postgres

  agent-kea-ha1:
    restart: always
    build:
      context: .
      dockerfile: docker/2/images/stork.Dockerfile
      target: kea
    image: "${REGISTRY-registry.gitlab.isc.org/isc-projects/stork}/agent-kea-ha1:latest"
    hostname: agent-kea-ha1
    networks:
      storknet:
        ipv4_address: 172.20.0.101
    expose:
      - "8001"
      - "9547"  # kea_exporter for prometheus
    ports:
      - "8881:8080"  # publish ports for development purposes
    environment:
      DB_TYPE: none
      STORK_AGENT_SERVER_URL: ${STORK_SERVER_URL-http://server:8080}
      STORK_AGENT_HOST: agent-kea-ha1
    volumes:
      - ${PWD}/docker/2/demo/config/agent-kea-ha1/kea-ctrl-agent.conf:/etc/kea/kea-ctrl-agent.conf
      - ${PWD}/docker/2/demo/config/agent-kea-ha1/kea-dhcp4.conf:/etc/kea/kea-dhcp4.conf
      - ${PWD}/docker/2/demo/config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-agent.conf:/etc/supervisor/conf.d/kea-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-dhcp4.conf:/etc/supervisor/conf.d/kea-dhcp4.conf
      - ${PWD}/docker/2/demo/config/supervisor/stork-agent.conf:/etc/supervisor/conf.d/stork-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/prometheus.conf:/etc/supervisor/conf.d/prometheus.conf

  agent-kea-ha2:
    restart: always
    build:
      context: .
      dockerfile: docker/2/images/stork.Dockerfile
      target: kea
    image: "${REGISTRY-registry.gitlab.isc.org/isc-projects/stork}/agent-kea-ha2:latest"
    hostname: agent-kea-ha2
    networks:
      storknet:
        ipv4_address: 172.20.0.110
    expose:
      - "8080"
    ports:
      - "8110:8080"  # publish ports for development purposes
    environment:
      DB_TYPE: none
      STORK_AGENT_SERVER_URL: ${STORK_SERVER_URL-http://server:8080}
      STORK_AGENT_HOST: agent-kea-ha2
    volumes:
      - ${PWD}/docker/2/demo/config/agent-kea-ha2/kea-ctrl-agent.conf:/etc/kea/kea-ctrl-agent.conf
      - ${PWD}/docker/2/demo/config/agent-kea-ha2/kea-dhcp4.conf:/etc/kea/kea-dhcp4.conf
      - ${PWD}/docker/2/demo/config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-agent.conf:/etc/supervisor/conf.d/kea-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-dhcp4.conf:/etc/supervisor/conf.d/kea-dhcp4.conf
      - ${PWD}/docker/2/demo/config/supervisor/stork-agent.conf:/etc/supervisor/conf.d/stork-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/prometheus.conf:/etc/supervisor/conf.d/prometheus.conf

  agent-kea-many-subnets:
    restart: always
    build:
      context: .
      dockerfile: docker/2/images/stork.Dockerfile
      target: kea
    image: "${REGISTRY-registry.gitlab.isc.org/isc-projects/stork}/agent-kea-many-subnets:latest"
    hostname: agent-kea-many-subnets
    networks:
      storknet:
        ipv4_address: 172.20.0.102
    expose:
      - "8002"
      - "9547"  # kea_exporter for prometheus
    ports:
      - "8882:8080"  # publish ports for development purposes
    environment:
      DB_TYPE: none
      STORK_AGENT_SERVER_URL: ${STORK_SERVER_URL-http://server:8080}
      STORK_AGENT_HOST: agent-kea-many-subnets
      STORK_AGENT_PROMETHEUS_KEA_EXPORTER_PER_SUBNET_STATS: "false"
    volumes:
      - ${PWD}/docker/2/demo/config/agent-kea-many-subnets/kea-ctrl-agent.conf:/etc/kea/kea-ctrl-agent.conf
      - ${PWD}/docker/2/demo/config/agent-kea-many-subnets/kea-dhcp4.conf:/etc/kea/kea-dhcp4.conf
      - ${PWD}/docker/2/demo/config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-agent.conf:/etc/supervisor/conf.d/kea-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/kea-dhcp4.conf:/etc/supervisor/conf.d/kea-dhcp4.conf
      - ${PWD}/docker/2/demo/config/supervisor/stork-agent.conf:/etc/supervisor/conf.d/stork-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/prometheus.conf:/etc/supervisor/conf.d/prometheus.conf
    depends_on:
      - kea-config-generator

  agent-bind9:
    restart: always
    build:
      context: .
      dockerfile: docker/2/images/stork.Dockerfile
      target: bind
    image: "${REGISTRY-registry.gitlab.isc.org/isc-projects/stork}/agent-bind9:latest"
    hostname: agent-bind9
    networks:
      storknet:
        ipv4_address: 172.20.0.53
    environment:
      STORK_AGENT_SERVER_URL: ${STORK_SERVER_URL-http://server:8080}
      STORK_AGENT_HOST: agent-bind9
    expose:
      - "8080"
      - "9100"  # node_exporter for prometheus
      - "9119"  # bind_exporter for prometheus
    volumes:
      - ${PWD}/docker/2/demo/config/agent-bind9/db.test:/etc/bind/db.test
      - ${PWD}/docker/2/demo/config/agent-bind9/named.conf:/etc/bind/named.conf
      - ${PWD}/docker/2/demo/config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
      - ${PWD}/docker/2/demo/config/supervisor/named.conf:/etc/supervisor/conf.d/named.conf
      - ${PWD}/docker/2/demo/config/supervisor/stork-agent.conf:/etc/supervisor/conf.d/stork-agent.conf
      - ${PWD}/docker/2/demo/config/supervisor/prometheus.conf:/etc/supervisor/conf.d/prometheus.conf

  # agent-bind9-2:
  #   extends:
  #     service: agent-bind9
  #   hostname: agent-bind9-2
  #   networks:
  #     storknet:
  #       ipv4_address: 172.20.0.54
  #   environment:
  #     STORK_AGENT_HOST: agent-bind9-2

  kea-config-generator:
    build:
      context: .
      dockerfile: docker/2/images/stork.Dockerfile
      target: kea-config-generator
    volumes:
      - ${PWD}/docker/2/demo/config/agent-kea-many-subnets/kea-dhcp4.conf:/etc/kea/kea-dhcp4.conf

  simulator:
    build:
      context: .
      dockerfile: docker/2/images/simulator.Dockerfile
    # Explicitly add entries to /etc/hosts for the hosts which are connected
    # to more than two networks. These explicit entries should be added at the
    # beginning of the /etc/hosts file enforcing that the connections by hostname
    # are established with the IP addresses belonging to the storknet network.
    # Before this change, agents sometimes listened on IP addresses dedicated for
    # DHCP communication instead.
    extra_hosts:
      - "agent-kea:172.20.0.100"
      - "agent-kea6:172.20.0.106"
    image: "${REGISTRY-registry.gitlab.isc.org/isc-projects/stork}/dhcp-traffic:latest"
    hostname: simulator
    networks:
      storknet:
        ipv4_address: 172.20.0.200
      subnet-00:
        ipv4_address: 172.100.0.200
      subnet-01:
        ipv4_address: 172.101.0.200
      subnet-02:
        ipv4_address: 172.102.0.200
      subnet6-00:
        ipv6_address: 3000:db8:1::200
      subnet6-01:
        ipv6_address: 3001:db8:1::200
    ports:
      - "5000:5000"
    environment:
      STORK_SERVER_URL: ${STORK_SERVER_URL-http://server:8080}
    depends_on:
      - server

  prometheus:
    image: prom/prometheus:v2.32.1
    networks:
      - storknet
    ports:
      - "9090:9090"
    volumes:
       - ${PWD}/docker/2/demo/config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:8.3.7
    networks:
      - storknet
    ports:
      - "3000:3000"
    volumes:
       - ${PWD}/docker/2/demo/config/grafana/grafana.ini:/etc/grafana/grafana.ini
       - ${PWD}/docker/2/demo/config/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
       - ${PWD}/docker/2/demo/config/grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
       - ./grafana/kea-dhcp4.json:/var/lib/grafana/dashboards/kea-dhcp4.json
       - ./grafana/kea-dhcp6.json:/var/lib/grafana/dashboards/kea-dhcp6.json
       - ./grafana/bind9-resolver.json:/var/lib/grafana/dashboards/bind9-resolver.json
    depends_on:
      - prometheus

  postgres:
    image: postgres:11
    networks:
      - storknet
    environment:
      POSTGRES_USER: stork
      POSTGRES_PASSWORD: stork
      POSTGRES_DB: stork
    ports:
      - "5678:5432"

  mariadb:
    image: mariadb:10.7
    networks:
      - storknet
    environment:
      MARIADB_ROOT_PASSWORD: root

networks:
  storknet:
    enable_ipv6: true
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
        - subnet: 3009:db8:1::/64
  subnet-00:
    ipam:
      config:
        - subnet: 172.100.0.0/24
  subnet-01:
    ipam:
      config:
        - subnet: 172.101.0.0/24
  subnet-02:
    ipam:
      config:
        - subnet: 172.102.0.0/24
  subnet6-00:
    enable_ipv6: true
    driver: bridge
    ipam:
      config:
        - subnet: 3000:db8:1::/64
  subnet6-01:
    enable_ipv6: true
    driver: bridge
    ipam:
      config:
        - subnet: 3001:db8:1::/64
