---
swagger: "2.0"
info:
  description: An API for Stork
  title: Stork API
  version: 0.1.0
consumes:
  - application/json
produces:
  - application/json
schemes:
- http
basePath: /api

securityDefinitions:
  Token:
    type: apiKey
    in: header
    name: Cookie

paths:
  /sessions:
    post:
      summary: Logs in a user to the system
      operationId: createSession
      tags:
        - Users
      parameters:
        - in: query
          name: useremail
          type: string
          description: E-mail of the user logging to the system
        - in: query
          name: userpassword
          type: string
          description: User password to log in to the system
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/User"
        400:
          description: Invalid user email or password supplied
          schema:
            $ref: "#/definitions/ApiError"
    delete:
      summary: Logs out a user from the system
      operationId: deleteSession
      tags:
        - Users
      responses:
        200:
          description: Logout successful
        400:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /users:
    get:
      summary: Get the list of users.
      description: >-
        Returns all users having an account in the system.
      operationId: getUsers
      security:
        - Token: []
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/paginationStartParam'
        - $ref: '#/parameters/paginationLimitParam'
        - $ref: '#/parameters/filterTextParam'
      responses:
        200:
          description: List of users returned.
          schema:
            $ref: "#/definitions/Users"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"
    post:
      summary: Creates new user account.
      description: >-
        Creates new user account in the system.
      operationId: createUser
      security:
        - Token: []
      tags:
        - Users
      parameters:
        - name: account
          in: body
          description: New user account including user information and password
          schema:
            $ref: "#/definitions/UserAccount"

      responses:
        200:
          description: User account successfully created.
          schema:
            $ref: "#/definitions/User"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

    put:
      summary: Updates existing user account.
      description: >-
        Updates exsiting user account in the system.
      operationId: updateUser
      security:
        - Token: []
      tags:
        - Users
      parameters:
        - name: account
          in: body
          description: Updated user account information and password
          schema:
            $ref: "#/definitions/UserAccount"

      responses:
        200:
          description: User account successfully updated.
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /users/{id}:
    get:
      summary: Get the specific user.
      description: Returns user by id.
      operationId: getUser
      security:
        - Token: []
      tags:
        - Users
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: User identifier in the database.
      responses:
        200:
          description: User information returned.
          schema:
            $ref: "#/definitions/User"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /users/{id}/password:
    put:
      summary: Updates user password.
      description: Updates user password.
      operationId: updateUserPassword
      security:
        - Token: []
      tags:
        - Users
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: User identifier in the database.
        - in: body
          name: passwords
          description: Old and new password
          schema:
            $ref: "#/definitions/PasswordChange"

      responses:
        200:
          description: Password updated successfully.
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /groups:
    get:
      summary: Get the list of groups.
      description: >-
        Returns all groups defined for the system.
      operationId: getGroups
      tags:
        - Users
      responses:
        200:
          description: List of groups returned.
          schema:
            $ref: "#/definitions/Groups"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /version:
    get:
      summary: Get version.
      operationId: getVersion
      security: []
      tags:
        - General
      responses:
        200:
          description: Version of Stork
          schema:
            $ref: "#/definitions/Version"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /machines:
    get:
      summary: Get list of machines.
      description: >-
        It is possible to filter list of machines by several fields. It is also always paged.
        Default page size is 10.
        A list of machines is returned in items field accompanied by total count
        which indicates total available number of records for given filtering
        parameters.
      operationId: getMachines
      tags:
        - Services
      parameters:
        - $ref: '#/parameters/paginationStartParam'
        - $ref: '#/parameters/paginationLimitParam'
        - $ref: '#/parameters/filterTextParam'
        - name: app
          in: query
          description: Limit returned list of machines to these which provide given app, possible values 'bind' or 'kea'.
          type: string
      responses:
        200:
          description: List of machines
          schema:
            $ref: "#/definitions/Machines"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"
    post:
      summary: Add new machine.
      description: >-
        To create new machine at least one parameter is needed: address.
        There are optional parameters as well.
      operationId: createMachine
      tags:
        - Services
      parameters:
        - name: machine
          in: body
          description: Machine
          schema:
            $ref: '#/definitions/Machine'
      responses:
        200:
          description: Machine information
          schema:
            $ref: "#/definitions/Machine"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /machines/{id}:
    get:
      summary: Get machine by ID.
      description: Get machine by the database specific ID.
      operationId: getMachine
      tags:
        - Services
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Machine ID.
      responses:
        200:
          description: A machine
          schema:
            $ref: "#/definitions/Machine"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"
    put:
      summary: Update machine information.
      description: Update machine information, e.g. IP address.
      operationId: updateMachine
      tags:
        - Services
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Machine ID.
        - name: machine
          in: body
          description: Machine details
          schema:
            $ref: '#/definitions/Machine'
      responses:
        200:
          description: Machine information.
          schema:
            $ref: "#/definitions/Machine"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"
    delete:
      summary: Delete machine by Id
      operationId: deleteMachine
      tags:
        - Services
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Machine ID.
      responses:
        200:
          description: Delete successful
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /machines/{id}/state:
    get:
      summary: Get machine's runtime state.
      operationId: getMachineState
      tags:
        - Services
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: Machine ID.
      responses:
        200:
          description: Machine
          schema:
            $ref: "#/definitions/Machine"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /apps:
    get:
      summary: Get list of apps.
      description: >-
        It is possible to filter the list of apps by several fields. It is also always paged.
        Default page size is 10.
        A list of apps is returned in items field accompanied by total count
        which indicates total available number of records for given filtering
        parameters.
      operationId: getApps
      tags:
        - Services
      parameters:
        - $ref: '#/parameters/paginationStartParam'
        - $ref: '#/parameters/paginationLimitParam'
        - $ref: '#/parameters/filterTextParam'
        - name: app
          in: query
          description: Limit returned list of apps, possible values 'bind' or 'kea'.
          type: string
      responses:
        200:
          description: List of apps
          schema:
            $ref: "#/definitions/Apps"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /apps/{id}:
    get:
      summary: Get app by ID.
      description: Get app by the database specific ID.
      operationId: getApp
      tags:
        - Services
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: App ID.
      responses:
        200:
          description: A app
          schema:
            $ref: "#/definitions/App"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/ApiError"

  /apps/{id}/services/status:
    get:
      summary: Get services status for a given application.
      description: >-
        Services status comprises runtime information about the services.
        In particular, a Kea application status comprises information about
        the High Availability service, such as HA state, partner's state etc.
      operationId: getAppServicesStatus
      tags:
        - Services
      parameters:
        - in: path
          name: id
          type: integer
          required: true
          description: App ID.
      responses:
        200:
          description: Services with their status.
          schema:
            $ref: '#/definitions/ServicesStatus'
        default:
          description: generic error response
          schema:
            $ref: '#/definitions/ApiError'

parameters:
  paginationStartParam:
    name: start
    in: query
    description: First record to retrieve.
    type: integer

  paginationLimitParam:
    name: limit
    in: query
    description: Number of records to retrieve.
    type: integer

  filterTextParam:
    name: text
    in: query
    description: >-
      Filtering text, e.g. hostname for the machines
      or version for the apps.
    type: string

definitions:
  User:
    type: object
    required:
      - id
      - login
      - email
      - name
      - lastname
    properties:
      id:
        type: integer
      login:
        type: string
      email:
        type: string
      name:
        type: string
      lastname:
        type: string
      groups:
        type: array
        items:
          type: integer

  Password:
    type: string

  PasswordChange:
    type: object
    required:
      - oldpassword
      - newpassword
    properties:
      oldpassword:
        $ref: "#/definitions/Password"
      newpassword:
        $ref: "#/definitions/Password"

  UserAccount:
    type: object
    required:
      - user
      - password
    properties:
      user:
        $ref: "#/definitions/User"
      password:
        $ref: "#/definitions/Password"

  Users:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/User'
      total:
        type: integer

  Group:
    type: object
    required:
      - id
      - name
      - description
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string

  Groups:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Group'
      total:
        type: integer

  Version:
    type: object
    required:
      - version
      - date
      - type
    properties:
      version:
        type: string
      date:
        type: string
        format: date-time
      type:
        type: string
        enum: [stable, release-candidate, development]

  Machine:
    type: object
    required:
      - address
    properties:
      id:
        type: integer
        readOnly: true
      address:
        type: string
      agentPort:
        type: integer
      agentVersion:
        type: string
        readOnly: true
      hostname:
        type: string
        readOnly: true
      cpus:
        type: integer
        readOnly: true
      cpusLoad:
        type: string
        readOnly: true
      memory:
        type: integer
        readOnly: true
      usedMemory:
        type: integer
        readOnly: true
      uptime:
        type: integer
        readOnly: true
      os:
        type: string
        readOnly: true
      platform:
        type: string
        readOnly: true
      platformFamily:
        type: string
        readOnly: true
      platformVersion:
        type: string
        readOnly: true
      kernelVersion:
        type: string
        readOnly: true
      kernelArch:
        type: string
        readOnly: true
      virtualizationSystem:
        type: string
        readOnly: true
      virtualizationRole:
        type: string
        readOnly: true
      hostID:
        type: string
        readOnly: true
      lastVisited:
        type: string
        format: date-time
        readOnly: true
      error:
        type: string
        readOnly: true
      apps:
        type: array
        items:
          $ref: '#/definitions/MachineApp'

  MachineApp:
    type: object
    properties:
      id:
        type: integer
      type:
        type: string
      version:
        type: string
      active:
        type: boolean

  Machines:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Machine'
      total:
        type: integer

  App:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      type:
        type: string
      ctrlAddress:
        type: string
      ctrlPort:
        type: integer
      active:
        type: boolean
      version:
        type: string
      machine:
        $ref: '#/definitions/AppMachine'
      details:
        allOf:
          - $ref: '#/definitions/AppKea'
          - $ref: '#/definitions/AppBind9'

  KeaDaemon:
    type: object
    properties:
      pid:
        type: integer
      name:
        type: string
      active:
        type: boolean
      version:
        type: string
      extendedVersion:
        type: string
      hooks:
        type: array
        items:
          type: string

  AppKea:
    type: object
    properties:
      extendedVersion:
        type: string
      daemons:
        type: array
        items:
          $ref: '#/definitions/KeaDaemon'

  Bind9Daemon:
    type: object
    properties:
      pid:
        type: integer
      name:
        type: string
      active:
        type: boolean
      version:
        type: string

  AppBind9:
    type: object
    properties:
      daemon:
        $ref: '#/definitions/Bind9Daemon'

  AppMachine:
    type: object
    properties:
      id:
        type: integer
        readOnly: true
      address:
        type: string
      hostname:
        type: string

  Apps:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/App'
      total:
        type: integer

  KeaStatus:
    type: object
    properties:
      pid:
        type: integer
      uptime:
        type: integer
      reload:
        type: integer
      daemon:
        type: string
      haServers:
        type: object
        properties:
          localServer:
            type: object
            properties:
              role:
                type: string
              scopes:
                type: array
                items:
                  type: string
              state:
                type: string
          remoteServer:
            type: object
            properties:
              age:
                type: integer
              inTouch:
                type: boolean
              role:
                type: string
              scopes:
                type: array
                items:
                  type: string
              state:
                type: string

  ServiceStatus:
    type: object
    properties:
      status:
        allOf:
          - $ref: '#/definitions/KeaStatus'

  ServicesStatus:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/ServiceStatus'

  ApiError:
    type: object
    required:
      - message
    properties:
      message:
        type: string

  principal:
    type: string
